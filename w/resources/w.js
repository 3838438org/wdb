// Generated by CoffeeScript 1.3.3
(function() {
  var cmd_hist, execute, file_cache, persist, persistable, select;

  file_cache = {};

  persistable = 'localStorage' in window && window.localStorage;

  if (persistable && localStorage['__w_cmd_hist']) {
    try {
      cmd_hist = JSON.parse(localStorage['__w_cmd_hist']);
    } catch (e) {
      cmd_hist = {};
    }
  } else {
    cmd_hist = {};
  }

  persist = function() {
    if (!persistable) {
      return;
    }
    return localStorage['__w_cmd_hist'] = JSON.stringify(cmd_hist);
  };

  SyntaxHighlighter.defaults.toolbar = false;

  SyntaxHighlighter.defaults['quick-code'] = false;

  select = function(frame) {
    var select_frame;
    select_frame = function(frame) {
      $('.traceline').removeClass('selected');
      $('#trace-' + frame.level).addClass('selected');
      return $('#eval').val('').attr('data-index', -1).attr('rows', 1).css({
        color: 'black'
      });
    };
    if (file_cache[__w.id][frame.level]) {
      select_frame(frame);
      $('#sourcecode').html(file_cache[__w.id][frame.level]);
      return $('#sourcecode').scrollTop($('.line.number' + frame.lno).position().top - $('#sourcecode').innerHeight() / 2);
    } else {
      return $.ajax('/', {
        dataType: 'json',
        data: {
          __w__: '__w__',
          what: 'file',
          which: frame.file
        }
      }).done(function(data) {
        var pre;
        select_frame(frame);
        pre = $('<pre>');
        $('#sourcecode').empty().append(pre);
        pre.html(data.file);
        return setTimeout((function() {
          SyntaxHighlighter.highlight({
            brush: 'python',
            highlight: [frame.lno]
          }, pre.get(0));
          $('#sourcecode').scrollTop($('.line.number' + frame.lno).position().top - $('#sourcecode').innerHeight() / 2);
          return file_cache[__w.id][frame.level] = $('#sourcecode').html();
        }), 100);
      });
    }
  };

  execute = function(code, id, frame_level) {
    return $.ajax('/', {
      dataType: 'json',
      data: {
        __w__: '__w__',
        what: 'eval',
        who: code,
        whose: id,
        where: frame_level
      }
    }).done(function(data) {
      var a, file, pre;
      pre = $('<pre>').text('Â ' + data.result).attr('title', '>>> ' + code.replace(/\n/g, '<br>    ').replace(/\s/g, '&nbsp'));
      if (data.exception) {
        a = $('<a>').attr('href', '/?__w__=__w__&what=sub_exception&which=' + data.exception).append(pre);
      }
      $('#scrollback').prepend(a || pre);
      $('#eval').val('').attr('data-index', -1).attr('rows', 1).css({
        color: 'black'
      });
      file = $('.selected .tracefile').text();
      if (!(file in cmd_hist)) {
        cmd_hist[file] = [];
      }
      cmd_hist[file].unshift(code);
      persist();
      return SyntaxHighlighter.highlight({
        brush: 'python',
        gutter: false
      }, pre.get(0));
    }).fail(function(data) {
      $('#eval').css({
        color: 'red'
      });
      return setTimeout((function() {
        return $('#eval').css({
          color: 'black'
        });
      }), 1000);
    });
  };

  $(function() {
    var $eval, $interpreter, $prompt, $scrollback, $source, $sourcecode, $traceback, $tracecode, $traceinfo, $traceline, frame, _i, _len, _ref;
    $('body').append($('<h1>').text(__w.type).append($('<small>').text(__w.value)));
    file_cache[__w.id] = {};
    $scrollback = $('<div>').attr('id', 'scrollback');
    $eval = $('<textarea>').attr({
      rows: 1,
      'data-index': -1,
      id: 'eval'
    });
    $prompt = $('<div>').attr('id', 'prompt');
    $prompt.append($eval);
    $interpreter = $('<div>').attr('id', 'interpreter');
    $interpreter.append($prompt);
    $interpreter.append($scrollback);
    $sourcecode = $('<div>').attr('id', 'sourcecode');
    $source = $('<div>').attr('id', 'source');
    $source.append($sourcecode);
    $source.append($interpreter);
    $('body').append($source);
    $traceback = $('<div>').attr('id', 'traceback');
    $('body').append($traceback);
    $source.css({
      height: $(window).height() - $('h1').outerHeight(true)
    });
    $traceback.css({
      height: $(window).height() - $('h1').outerHeight(true)
    });
    _ref = __w.frames;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      frame = _ref[_i];
      $traceline = $('<div>').addClass('traceline').attr('id', 'trace-' + frame.level).attr('data-level', frame.level);
      $traceinfo = $('<div>').addClass('traceinfo').append($('<span>').addClass('tracefile').text(frame.file)).append($('<span>').addClass('tracetxt').text(': ')).append($('<span>').addClass('tracelno').text(frame.lno)).append($('<span>').addClass('tracetxt').text(' in ')).append($('<span>').addClass('tracefun').text(frame["function"]));
      $tracecode = $('<div>').addClass('tracecode').append($('<pre>').addClass('code').text(frame.code));
      $traceline.append($traceinfo);
      $traceline.append($tracecode);
      $traceback.prepend($traceline);
    }
    $('.traceline').each(function() {
      return SyntaxHighlighter.highlight({
        brush: 'python',
        gutter: false
      }, $(this).find('.tracecode .code').get(0));
    }).on('click', function() {
      return select(__w.frames[$(this).attr('data-level')]);
    });
    $('#eval').on('keydown', function(e) {
      var endPos, file, index, startPos, to_set, txtarea;
      if (e.keyCode === 13) {
        $eval = $(this);
        if (!e.shiftKey) {
          execute($eval.val(), __w.id, $('.selected').attr('data-level'));
          return false;
        } else {
          return $eval.attr('rows', parseInt($eval.attr('rows')) + 1);
        }
      } else if (e.keyCode === 9) {
        $eval = $(this);
        txtarea = $eval.get(0);
        startPos = txtarea.selectionStart;
        endPos = txtarea.selectionEnd;
        if (startPos || startPos === '0') {
          $eval.val($eval.val().substring(0, startPos) + '    ' + $eval.val().substring(endPos, $eval.val().length));
        } else {
          $eval.val($eval.val() + '    ');
        }
        return false;
      } else if (e.keyCode === 38) {
        $eval = $(this);
        file = $('.selected .tracefile').text();
        if (!e.shiftKey) {
          if (file in cmd_hist) {
            index = parseInt($eval.attr('data-index')) + 1;
            if (index >= 0 && index < cmd_hist[file].length) {
              to_set = cmd_hist[file][index];
              if (index === 0) {
                $eval.attr('data-current', $eval.val());
              }
              $eval.val(to_set).attr('data-index', index).attr('rows', to_set.split('\n').length);
              return false;
            }
          }
        }
      } else if (e.keyCode === 40) {
        $eval = $(this);
        file = $('.selected .tracefile').text();
        if (!e.shiftKey) {
          if (file in cmd_hist) {
            index = parseInt($eval.attr('data-index')) - 1;
            if (index >= -1 && index < cmd_hist[file].length) {
              if (index === -1) {
                to_set = $eval.attr('data-current');
              } else {
                to_set = cmd_hist[file][index];
              }
              $eval.val(to_set).attr('data-index', index).attr('rows', to_set.split('\n').length);
              return false;
            }
          }
        }
      }
    });
    $('.traceline').first().click();
    return $('#eval').focus();
  });

}).call(this);
