// Generated by CoffeeScript 1.3.3
(function() {

  SyntaxHighlighter.defaults['toolbar'] = false;

  SyntaxHighlighter.defaults['quick-code'] = false;

  $(function() {
    var frame, get_eval, get_file, source, traceback, tracecode, traceeval, traceinfo, traceline, _i, _len, _ref;
    $('body').append($('<h1>').text(__w.type).append($('<small>').text(__w.value)));
    traceback = $('<div>').attr('id', 'traceback');
    $('body').append(traceback);
    source = $('<div>').attr('id', 'source');
    $('body').append(source);
    get_file = function(file, lno) {
      return function() {
        return $.ajax('', {
          dataType: 'json',
          data: {
            __w__: '__w__',
            what: 'file',
            which: file
          }
        }).success(function(data) {
          var pre;
          pre = $('<pre>');
          source.empty().append(pre);
          pre.html(data.file);
          return setTimeout((function() {
            SyntaxHighlighter.highlight({
              brush: 'python',
              highlight: [lno]
            }, pre.get(0));
            return source.scrollTop($('.line.number' + lno).position().top - 200);
          }), 100);
        });
      };
    };
    get_eval = function(code, id, frame_level, $traceline) {
      return $.ajax('', {
        dataType: 'json',
        data: {
          __w__: '__w__',
          what: 'eval',
          who: code,
          whose: id,
          where: frame_level
        }
      }).success(function(data) {
        var pre;
        $traceline.find('.eval-results').append(pre = $('<pre>').text('Â ' + data.result));
        $traceline.find('.eval').val('');
        console.log(data.result);
        return SyntaxHighlighter.highlight({
          brush: 'python',
          gutter: false
        }, pre.get(0));
      });
    };
    _ref = __w.frames;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      frame = _ref[_i];
      traceline = $('<div>').addClass('traceline').attr('id', 'trace-' + frame.level).attr('data-level', frame.level);
      traceinfo = $('<div>').addClass('traceinfo');
      traceinfo.append($('<span>').addClass('tracetxt').text('File:  ')).append($('<span>').addClass('tracefile').text(frame.file).on('click', get_file(frame.file, frame.lno))).append($('<span>').addClass('tracetxt').text(': ')).append($('<span>').addClass('tracelno').text(frame.lno)).append($('<span>').addClass('tracetxt').text(' in ')).append($('<span>').addClass('tracefun').text(frame["function"]));
      tracecode = $('<div>').addClass('tracecode');
      tracecode.append($('<pre>').addClass('code').text(frame.code));
      traceeval = $('<div>').addClass('traceeval');
      traceeval.append($('<div>').addClass('eval-results')).append($('<input>').addClass('eval'));
      traceline.append(traceinfo);
      traceline.append(tracecode);
      traceline.append(traceeval);
      traceback.append(traceline);
    }
    $('.traceline').each(function() {
      return SyntaxHighlighter.highlight({
        brush: 'python',
        gutter: false
      }, $(this).find('.tracecode .code').get(0));
    });
    $('.tracefile').last().click();
    return $('.eval').on('keydown', function(e) {
      var $eval, $traceline;
      if (e.keyCode === 13) {
        $eval = $(this);
        $traceline = $eval.closest('.traceline');
        return get_eval($eval.val(), __w.id, $traceline.attr('data-level'), $traceline);
      }
    });
  });

}).call(this);
