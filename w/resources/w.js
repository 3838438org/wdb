// Generated by CoffeeScript 1.3.3
(function() {
  var cmd_hist, code, done_fun, execute, file_cache, get, persist, persistable, select, w_load,
    _this = this;

  file_cache = {};

  done_fun = null;

  persistable = 'localStorage' in window && window.localStorage;

  if (persistable && localStorage['__w_cmd_hist']) {
    try {
      cmd_hist = JSON.parse(localStorage['__w_cmd_hist']);
    } catch (e) {
      cmd_hist = {};
    }
  } else {
    cmd_hist = {};
  }

  persist = function() {
    if (!persistable) {
      return;
    }
    return localStorage['__w_cmd_hist'] = JSON.stringify(cmd_hist);
  };

  $.SyntaxHighlighter.loadedExtras = true;

  $.SyntaxHighlighter.init({
    debug: true,
    lineNumbers: false,
    highlight: false,
    load: false
  });

  get = function(data, done, fail) {
    ws.send('GET|' + JSON.stringify(data));
    return done_fun = done;
  };

  code = function(code, classes) {
    var cls, _i, _len;
    if (classes == null) {
      classes = [];
    }
    code = $('<code class="language">' + code + '</code>');
    for (_i = 0, _len = classes.length; _i < _len; _i++) {
      cls = classes[_i];
      code.addClass(cls);
    }
    return code;
  };

  select = function(frame) {
    var scrollTo, select_frame;
    select_frame = function(frame) {
      $('.traceline').removeClass('selected');
      $('#trace-' + frame.level).addClass('selected');
      return $('#eval').val('').attr('data-index', -1).attr('rows', 1).css({
        color: 'black'
      });
    };
    scrollTo = function(lno) {
      $('#sourcecode li.highlighted').removeClass('highlighted').addClass('highlighted-other');
      return $('#sourcecode').animate({
        scrollTop: $('#sourcecode').find('li').eq(lno - 1).addClass('highlighted').position().top - $('#sourcecode').innerHeight() / 2 + $('#sourcecode').scrollTop()
      }, 1000);
    };
    if (frame.file === '<w>') {
      file_cache[__w.id][frame.file] = 'lol';
    }
    if (frame.file === $('#sourcecode').attr('title')) {
      select_frame(frame);
      return scrollTo(frame.lno);
    } else if (file_cache[__w.id][frame.file]) {
      select_frame(frame);
      $('#sourcecode').html(file_cache[__w.id][frame.file]);
      $('#sourcecode').attr('title', frame.file);
      return scrollTo(frame.lno);
    } else {
      return get({
        what: 'file',
        which: frame.file
      }, (function(data) {
        var nh;
        select_frame(frame);
        $('#sourcecode').empty().append(nh = code(data.file, ['linenums']));
        nh.syntaxHighlight();
        $('#sourcecode').attr('title', frame.file);
        scrollTo(frame.lno);
        return file_cache[__w.id][frame.file] = $('#sourcecode').html();
      }));
    }
  };

  execute = function(snippet, id, frame_level) {
    if (snippet.indexOf('.') === 0) {
      switch (snippet.substr(1)) {
        case 's':
          this.ws.send('STEP');
          break;
        case 'c':
          this.ws.send('CONTINUE');
          break;
        case 'q':
          this.ws.send('QUIT');
      }
      return;
    }
    return get({
      what: 'eval',
      who: snippet,
      whose: id,
      where: frame_level
    }, (function(data) {
      var a, file, nh;
      $('#scrollback').append(nh = code(snippet, ['prompted']));
      nh.syntaxHighlight();
      $('#scrollback').append(nh = code(data.result));
      nh.syntaxHighlight();
      if (data.exception) {
        a = $('<a>').attr('href', '/?__w__=__w__&what=sub_exception&which=' + data.exception);
        nh.wrap(a);
      }
      $('#eval').val('').attr('data-index', -1).attr('rows', 1).css({
        color: 'black'
      });
      file = $('.selected .tracefile').text();
      if (!(file in cmd_hist)) {
        cmd_hist[file] = [];
      }
      cmd_hist[file].unshift(snippet);
      persist();
      return $('#interpreter').stop(true).animate({
        scrollTop: $('#scrollback').height()
      }, 1000);
    }), (function(data) {
      $('#eval').css({
        color: 'red'
      });
      return setTimeout((function() {
        return $('#eval').css({
          color: 'black'
        });
      }), 1000);
    }));
  };

  w_load = function() {
    var $eval, $interpreter, $prompt, $scrollback, $source, $sourcecode, $traceback, $tracecode, $tracefile, $tracefilelno, $tracefun, $tracefunfun, $traceline, $tracelno, frame, suffix, _i, _len, _ref;
    $('body').append($('<h1>').text(__w.type).append($('<small>').text(__w.value)));
    file_cache[__w.id] = {};
    $scrollback = $('<div>').attr('id', 'scrollback');
    $eval = $('<textarea>').attr({
      rows: 1,
      'data-index': -1,
      id: 'eval'
    });
    $prompt = $('<div>').attr('id', 'prompt');
    $prompt.append($eval);
    $interpreter = $('<div>').attr('id', 'interpreter');
    $interpreter.append($scrollback);
    $interpreter.append($prompt);
    $sourcecode = $('<div>').attr('id', 'sourcecode');
    $source = $('<div>').attr('id', 'source');
    $source.append($sourcecode);
    $source.append($interpreter);
    $('body').append($source);
    $traceback = $('<div>').attr('id', 'traceback');
    $('body').append($traceback);
    $source.css({
      height: $(window).height() - $('h1').outerHeight(true)
    });
    $traceback.css({
      height: $(window).height() - $('h1').outerHeight(true)
    });
    _ref = __w.frames;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      frame = _ref[_i];
      $traceline = $('<div>').addClass('traceline').attr('id', 'trace-' + frame.level).attr('data-level', frame.level);
      if (frame.current) {
        $traceline.addClass('current');
      }
      $tracefile = $('<span>').addClass('tracefile').text(frame.file);
      $tracelno = $('<span>').addClass('tracelno').text(frame.lno);
      $tracefun = $('<span>').addClass('tracefun').text(frame["function"]);
      $tracefilelno = $('<div>').addClass('tracefilelno').append($tracefile).append($tracelno);
      $tracefunfun = $('<div>').addClass('tracefunfun').append($tracefun);
      if (frame.file.indexOf('site-packages') > 0) {
        suffix = frame.file.split('site-packages').slice(-1)[0];
        $tracefile.text(suffix);
        $tracefile.prepend($('<span>').addClass('tracestar').text('*').attr({
          title: frame.file
        }));
      }
      $tracecode = $('<div>').addClass('tracecode').append(code(frame.code));
      $traceline.append($tracefilelno);
      $traceline.append($tracecode);
      $traceline.append($tracefunfun);
      $traceback.prepend($traceline);
    }
    $('.traceline').each(function() {
      return $(this).find('code').syntaxHighlight();
    }).on('click', function() {
      return select(__w.frames[$(this).attr('data-level')]);
    });
    $('#eval').on('keydown', function(e) {
      var endPos, file, index, startPos, to_set, txtarea;
      if (e.keyCode === 13) {
        $eval = $(this);
        if (!e.shiftKey) {
          execute($eval.val(), __w.id, $('.selected').attr('data-level'));
          return false;
        } else {
          return $eval.attr('rows', parseInt($eval.attr('rows')) + 1);
        }
      } else if (e.keyCode === 9) {
        $eval = $(this);
        txtarea = $eval.get(0);
        startPos = txtarea.selectionStart;
        endPos = txtarea.selectionEnd;
        if (startPos || startPos === '0') {
          $eval.val($eval.val().substring(0, startPos) + '    ' + $eval.val().substring(endPos, $eval.val().length));
        } else {
          $eval.val($eval.val() + '    ');
        }
        return false;
      } else if (e.keyCode === 38) {
        $eval = $(this);
        file = $('.selected .tracefile').text();
        if (!e.shiftKey) {
          if (file in cmd_hist) {
            index = parseInt($eval.attr('data-index')) + 1;
            if (index >= 0 && index < cmd_hist[file].length) {
              to_set = cmd_hist[file][index];
              if (index === 0) {
                $eval.attr('data-current', $eval.val());
              }
              $eval.val(to_set).attr('data-index', index).attr('rows', to_set.split('\n').length);
              return false;
            }
          }
        }
      } else if (e.keyCode === 40) {
        $eval = $(this);
        file = $('.selected .tracefile').text();
        if (!e.shiftKey) {
          if (file in cmd_hist) {
            index = parseInt($eval.attr('data-index')) - 1;
            if (index >= -1 && index < cmd_hist[file].length) {
              if (index === -1) {
                to_set = $eval.attr('data-current');
              } else {
                to_set = cmd_hist[file][index];
              }
              $eval.val(to_set).attr('data-index', index).attr('rows', to_set.split('\n').length);
              return false;
            }
          }
        }
      }
    });
    $('.traceline.current').click();
    return $('#eval').focus();
  };

  $(function() {
    var ws;
    $.ajax(location.href, {
      headers: {
        "W-Type": 'Get'
      }
    }).done(function(data) {
      document.open();
      document.write(data);
      return document.close();
    }).fail(function(data) {
      document.open();
      document.write(data.responseText);
      return document.close();
    });
    _this.ws = ws = new WebSocket("ws://localhost:" + _this.__ws_port);
    ws.onclose = function(m) {
      return console.log("close " + m);
    };
    ws.onmessage = function(m) {
      var cmd, data, pipe;
      pipe = m.data.indexOf('|');
      if (pipe > -1) {
        cmd = m.data.substr(0, pipe);
        data = m.data.substr(pipe + 1);
      } else {
        cmd = m.data;
      }
      switch (cmd) {
        case 'TRACE':
          _this.__w = JSON.parse(data);
          $('body').html('');
          return w_load();
        case 'PING':
          return ws.send('PONG');
        case 'JSON':
          done_fun(JSON.parse(data));
          return done_fun = null;
      }
    };
    ws.onerror = function(m) {
      return console.log("WebSocket error", m);
    };
    ws.onopen = function(m) {
      return console.log("WebSocket is open", m);
    };
    return _this.onbeforeunload = function() {
      try {
        ws.send('QUIT');
      } catch (e) {
        ({});
      }
      return void 0;
    };
  });

}).call(this);
