// Generated by CoffeeScript 1.3.3
(function() {
  var cmd_hist, code, persist, persistable;

  persistable = 'localStorage' in window && window.localStorage;

  if (persistable && localStorage['__w_cmd_hist']) {
    try {
      cmd_hist = JSON.parse(localStorage['__w_cmd_hist']);
    } catch (e) {
      cmd_hist = {};
    }
  } else {
    cmd_hist = {};
  }

  persist = function() {
    if (!persistable) {
      return;
    }
    return localStorage['__w_cmd_hist'] = JSON.stringify(cmd_hist);
  };

  SyntaxHighlighter.defaults.toolbar = false;

  SyntaxHighlighter.defaults.quick - (code = false);

  $(function() {
    var frame, get_eval, get_file, source, traceback, tracecode, traceeval, traceinfo, traceline, _i, _len, _ref;
    $('body').append($('<h1>').text(__w.type).append($('<small>').text(__w.value)));
    traceback = $('<div>').attr('id', 'traceback');
    $('body').append(traceback);
    source = $('<div>').attr('id', 'source');
    $('body').append(source);
    get_file = function(file, lno) {
      return function() {
        return $.ajax('/', {
          dataType: 'json',
          data: {
            __w__: '__w__',
            what: 'file',
            which: file
          }
        }).success(function(data) {
          var pre;
          pre = $('<pre>');
          source.empty().append(pre);
          pre.html(data.file);
          return setTimeout((function() {
            SyntaxHighlighter.highlight({
              brush: 'python',
              highlight: [lno]
            }, pre.get(0));
            return source.scrollTop($('.line.number' + lno).position().top - 200);
          }), 100);
        });
      };
    };
    get_eval = function(code, id, frame_level, $traceline) {
      return $.ajax('/', {
        dataType: 'json',
        data: {
          __w__: '__w__',
          what: 'eval',
          who: code,
          whose: id,
          where: frame_level
        }
      }).success(function(data) {
        var a, file, pre;
        pre = $('<pre>').text('Â ' + data.result).attr('title', '>>> ' + code.replace(/\n/g, '<br>    ').replace(/\s/g, '&nbsp'));
        if (data.exception) {
          a = $('<a>').attr('href', '/?__w__=__w__&what=sub_exception&which=' + data.exception).append(pre);
        }
        $traceline.find('.eval-results').append(a || pre);
        $traceline.find('.eval').val('').attr('data-index', -1).attr('rows', 1).css({
          color: 'black'
        });
        file = $traceline.find('.tracefile').text();
        if (!(file in cmd_hist)) {
          cmd_hist[file] = [];
        }
        cmd_hist[file].unshift(code);
        persist();
        return SyntaxHighlighter.highlight({
          brush: 'python',
          gutter: false
        }, pre.get(0));
      }).fail(function(data) {
        $traceline.find('.eval').css({
          color: 'red'
        });
        return setTimeout((function() {
          return $traceline.find('.eval').css({
            color: 'black'
          });
        }), 1000);
      });
    };
    _ref = __w.frames;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      frame = _ref[_i];
      traceline = $('<div>').addClass('traceline').attr('id', 'trace-' + frame.level).attr('data-level', frame.level);
      traceinfo = $('<div>').addClass('traceinfo');
      traceinfo.append($('<span>').addClass('tracetxt').text('File:  ')).append($('<span>').addClass('tracefile').text(frame.file).on('click', get_file(frame.file, frame.lno))).append($('<span>').addClass('tracetxt').text(': ')).append($('<span>').addClass('tracelno').text(frame.lno)).append($('<span>').addClass('tracetxt').text(' in ')).append($('<span>').addClass('tracefun').text(frame["function"]));
      tracecode = $('<div>').addClass('tracecode');
      tracecode.append($('<pre>').addClass('code').text(frame.code));
      traceeval = $('<div>').addClass('traceeval');
      traceeval.append($('<div>').addClass('eval-results')).append($('<div>').addClass('eval-prompt').append($('<textarea>').attr('rows', 1).attr('data-index', -1).addClass('eval')));
      traceline.append(traceinfo);
      traceline.append(tracecode);
      traceline.append(traceeval);
      traceback.append(traceline);
    }
    $('.traceline').each(function() {
      return SyntaxHighlighter.highlight({
        brush: 'python',
        gutter: false
      }, $(this).find('.tracecode .code').get(0));
    });
    $('.eval').on('keydown', function(e) {
      var $eval, $traceline, endPos, file, index, startPos, to_set, txtarea;
      if (e.keyCode === 13) {
        $eval = $(this);
        if (!e.shiftKey) {
          $traceline = $eval.closest('.traceline');
          get_eval($eval.val(), __w.id, $traceline.attr('data-level'), $traceline);
          return false;
        } else {
          return $eval.attr('rows', parseInt($eval.attr('rows')) + 1);
        }
      } else if (e.keyCode === 9) {
        $eval = $(this);
        txtarea = $eval.get(0);
        startPos = txtarea.selectionStart;
        endPos = txtarea.selectionEnd;
        if (startPos || startPos === '0') {
          $eval.val($eval.val().substring(0, startPos) + '    ' + $eval.val().substring(endPos, $eval.val().length));
        } else {
          $eval.val($eval.val() + '    ');
        }
        return false;
      } else if (e.keyCode === 38) {
        $eval = $(this);
        $traceline = $eval.closest('.traceline');
        file = $traceline.find('.tracefile').text();
        if (!e.shiftKey) {
          if (file in cmd_hist) {
            index = parseInt($eval.attr('data-index')) + 1;
            if (index >= 0 && index < cmd_hist[file].length) {
              to_set = cmd_hist[file][index];
              if (index === 0) {
                $eval.attr('data-current', $eval.val());
              }
              $eval.val(to_set).attr('data-index', index).attr('rows', to_set.split('\n').length);
              return false;
            }
          }
        }
      } else if (e.keyCode === 40) {
        $eval = $(this);
        $traceline = $eval.closest('.traceline');
        file = $traceline.find('.tracefile').text();
        if (!e.shiftKey) {
          if (file in cmd_hist) {
            index = parseInt($eval.attr('data-index')) - 1;
            if (index >= -1 && index < cmd_hist[file].length) {
              if (index === -1) {
                to_set = $eval.attr('data-current');
              } else {
                to_set = cmd_hist[file][index];
              }
              $eval.val(to_set).attr('data-index', index).attr('rows', to_set.split('\n').length);
              return false;
            }
          }
        }
      }
    });
    $('.tracefile').last().click();
    return $('.eval').last().focus();
  });

}).call(this);
